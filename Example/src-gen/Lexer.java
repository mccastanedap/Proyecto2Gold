// DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED FROM FILE "src/Lexer.gold"
import gold.structures.automaton.*;
import gold.util.*;
import gold.visualization.automaton.*;
import java.lang.*;
import org.apfloat.*;
import static gold.util.GReflection.*;
@SuppressWarnings("all")
public final class Lexer {
  static {
    gold.swing.util.GUtilities.installGoldLookAndFeel();
  }
  public static void main(String[] args) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=5;
      Object lexer=$fix(Lexer.createTransducer());
      $line=6;
      Lexer.testLexer($cast(gold.structures.automaton.ITransducer.class,lexer));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Lexer.class,"main",$line);
    }
  }
  public static Object testLexer(ITransducer M) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=12;
      java.util.Scanner sc=null;
      sc=$invokeConstructor(java.util.Scanner.class,new Object[]{$invokeField(System.class,"in",true,null)});
      $line=13;
      while (true) {
        if (!($bool(true))) break;
        $line=14;
        System.out.println($message(new Object[]{"----------------------------"}));
        $line=15;
        System.out.println($message(new Object[]{"Enter an input string: "}));
        $line=16;
        Object string=$fix($opAdditY(((java.util.Scanner)sc).nextLine()," "));
        $line=17;
        Object result=$fix(((gold.structures.automaton.ITransducer)M).acceptsString($cast(java.lang.String.class,string)));
        $line=18;
        Object tokenStream=$fix(((gold.structures.automaton.ITransducer)M).getOutputString());
        $line=19;
        System.out.println($message(new Object[]{$opAdditY($opAdditY("The lexer did ",(($bool(result))?(""):("not ")))," accept the string.")}));
        $line=20;
        if ($bool(result)) {
          $line=20;
          System.out.println($message(new Object[]{$opAdditY("Token Stream: ",tokenStream)}));
        }
      }
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Lexer.class,"testLexer",$line);
    }
    return $result;
  }
  public static Object names=null;
  public static ITransducer createTransducer() {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=34;
      Object preKW=$fix(GCollections.asSet("p","pl","plu","plus","t","ti","tim","time","times"));
      $line=35;
      Object Q=$fix(GCollections.asSet("Init","R","RO","ROB","ROBO","ROBOT","ROBOT_","ROBOT_R","V","VA","VAR","VARS","B","BE","BEG","BEGI","BEGIN","E","EN","END","a","as","ass","assi","assig","assign","t","to","m","mo","mov","move","t","tu","tur","turn","f","fa","fac","face","p","pu","put","o","of","p","pi","pic","pick","T","To","ToT","ToTh","ToThe","i","in","inD","inDi","inDir","r","ri","rig","rigt","rigth","l","le","lef","left","b","ba","bac","back","f","fr","fro","fron","front"));
      $line=40;
      Object \u03A3=$fix($opUnionY($opUnionY($opIntvlY('0','9'),$opIntvlY('a','z')),GCollections.asSet('(',')',' ')));
      $line=41;
      Object Out=$fix(GCollections.asSet('(',')','+','*','v','n'));
      $line=42;
      Object q_0=$fix("I");
      $line=43;
      Object F=$fix(GCollections.asSet("I"));
      $line=44;
      $result=$invokeConstructor(GDeterministicTransducer.class,new Object[]{Q,\u03A3,Out,q_0,F,new GMethod(Lexer.class,"\u03B4"),new GMethod(Lexer.class,"g"),new GMethod(Lexer.class,"h")});
      if (true) break $try;
      $line=45;
      $rethrow(new RuntimeException("The function \"createTransducer()\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Lexer.class,"createTransducer",$line);
    }
    return $cast(ITransducer.class,$result);
  }
  public static Object \u03B4(Object q, Object \u03C3) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=48;
      if ($bool($opEqualY(q,"Err"))) {
        $line=48;
        $result="Err";
        if (true) break $try;
      }
      else {
        $line=49;
        if ($opMembrY(\u03C3,GCollections.asSet('(',')',' ','\n',',','\t',';',':'))) {
          $line=49;
          $result="Init";
          if (true) break $try;
        }
        else {
          $line=50;
          if ($opMembrY(\u03C3,GCollections.asSet($opIntvlY('0','9')))) {
            $line=50;
            $result="Init";
            if (true) break $try;
          }
          else {
            $line=51;
            if (($opEqualY(q,"Init")&&$opEqualY(\u03C3,'R'))) {
              $line=51;
              $result="R";
              if (true) break $try;
            }
            else {
              $line=52;
              if (($opEqualY(q,"R")&&$opEqualY(\u03C3,'O'))) {
                $line=52;
                $result="RO";
                if (true) break $try;
              }
              else {
                $line=53;
                if (($opEqualY(q,"RO")&&$opEqualY(\u03C3,"B"))) {
                  $line=53;
                  $result="ROB";
                  if (true) break $try;
                }
                else {
                  $line=54;
                  if (($opEqualY(q,"ROB")&&$opEqualY(\u03C3,"O"))) {
                    $line=54;
                    $result="ROBO";
                    if (true) break $try;
                  }
                  else {
                    $line=55;
                    if (($opEqualY(q,"ROBO")&&$opEqualY(\u03C3,"T"))) {
                      $line=55;
                      $result="ROBOT";
                      if (true) break $try;
                    }
                    else {
                      $line=56;
                      if (($opEqualY(q,"ROBOT")&&$opEqualY(\u03C3,"_"))) {
                        $line=56;
                        $result="ROBOT_";
                        if (true) break $try;
                      }
                      else {
                        $line=57;
                        if ($opEqualY(q,"ROBOT_")) {
                        }
                        else {
                          $line=59;
                          if (($opEqualY(q,"p")&&$opEqualY(\u03C3,'l'))) {
                            $line=59;
                            $result="pl";
                            if (true) break $try;
                          }
                          else {
                            $line=60;
                            if (($opEqualY(q,"pl")&&$opEqualY(\u03C3,'u'))) {
                              $line=60;
                              $result="plu";
                              if (true) break $try;
                            }
                            else {
                              $line=61;
                              if (($opEqualY(q,"plu")&&$opEqualY(\u03C3,'s'))) {
                                $line=61;
                                $result="plus";
                                if (true) break $try;
                              }
                              else {
                                $line=62;
                                if (($opEqualY(q,"t")&&$opEqualY(\u03C3,'i'))) {
                                  $line=62;
                                  $result="ti";
                                  if (true) break $try;
                                }
                                else {
                                  $line=63;
                                  if (($opEqualY(q,"ti")&&$opEqualY(\u03C3,'m'))) {
                                    $line=63;
                                    $result="tim";
                                    if (true) break $try;
                                  }
                                  else {
                                    $line=64;
                                    if (($opEqualY(q,"tim")&&$opEqualY(\u03C3,'e'))) {
                                      $line=64;
                                      $result="time";
                                      if (true) break $try;
                                    }
                                    else {
                                      $line=65;
                                      if (($opEqualY(q,"time")&&$opEqualY(\u03C3,'s'))) {
                                        $line=65;
                                        $result="times";
                                        if (true) break $try;
                                      }
                                      else {
                                        $line=68;
                                        $result="Id";
                                        if (true) break $try;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      $line=70;
      $rethrow(new RuntimeException("The function \"\u03B4(q:Object,\u03C3:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Lexer.class,"\u03B4",$line);
    }
    return $result;
  }
  public static Object g(Object q) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=75;
      $result="";
      if (true) break $try;
      $line=76;
      $rethrow(new RuntimeException("The function \"g(q:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Lexer.class,"g",$line);
    }
    return $result;
  }
  public static Object h(Object q, Object \u03C3) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=79;
      String s=null;
      s=$defaultValue(String.class);
      $line=80;
      s=$cast(String.class,$fix(""));
      $line=82;
      if ((!$opMembrY(q,GCollections.asSet("Err"))&&$opMembrY(\u03C3,GCollections.asSet('(',')',' ')))) {
        $line=83;
        if (!$opMembrY(\u03C3,GCollections.asSet(' '))) {
          $line=83;
          s=$cast(String.class,$fix($invokeMethod(String.class,"valueOf",true,null,new Object[]{\u03C3})));
        }
        $line=84;
        if ($opEqualY(q,"I")) {
          $line=84;
          $result=s;
          if (true) break $try;
        }
        else {
          $line=85;
          if ($opEqualY(q,"plus")) {
            $line=85;
            $result=$opAdditY("+",s);
            if (true) break $try;
          }
          else {
            $line=86;
            if ($opEqualY(q,"times")) {
              $line=86;
              $result=$opAdditY("*",s);
              if (true) break $try;
            }
            else {
              $line=87;
              if ($opEqualY(q,"Num")) {
                $line=87;
                $result=$opAdditY("n",s);
                if (true) break $try;
              }
              else {
                $line=88;
                $result=$opAdditY("v",s);
                if (true) break $try;
              }
            }
          }
        }
      }
      else {
        $line=90;
        $result="";
        if (true) break $try;
      }
      $line=92;
      $rethrow(new RuntimeException("The function \"h(q:Object,\u03C3:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Lexer.class,"h",$line);
    }
    return $result;
  }
}
